#!/usr/bin/env python3
#
# fetchgmail
#
# @2023 AtamaokaC
# Python Party of Osaka University Medical School, Japan
# License: GNU General Public License v3

import os
import json
import datetime
import sys
import argparse
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def get_service(token_path, creds_path):
    creds = None
    if os.path.exists(token_path):
        with open(token_path, 'r') as token:
            creds = Credentials.from_authorized_user_file(token_path, SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(creds_path, SCOPES)
            creds = flow.run_local_server(port=0)

        with open(token_path, 'w') as token:
            token.write(creds.to_json())

    return build('gmail', 'v1', credentials=creds)

def main():
    parser = argparse.ArgumentParser(description="Fetch Gmail messages.")
    parser.add_argument("--include-sent", help="Include sent messages.", action="store_true")
    args = parser.parse_args()

    home_dir = os.path.expanduser("~")
    token_path = os.path.join(home_dir, ".fetchgmail", "token.json")
    creds_path = os.path.join(home_dir, ".fetchgmail", "credentials.json")
    last_time_path = os.path.join(home_dir, ".fetchgmail", "last_received_time.json")

    service = get_service(token_path, creds_path)

    try:
        with open(last_time_path, 'r') as f:
            last_received_time = json.load(f).get('last_received_time', '')
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print("Invalid or missing last_received_time.json. Fetching will be skipped. Resetting to current time.", file=sys.stderr)
        last_received_time = str(int(datetime.datetime.utcnow().timestamp() * 1000))
        with open(last_time_path, 'w') as f:
            json.dump({'last_received_time': last_received_time}, f)
        return

    query = f"after:{int(last_received_time)//1000} in:inbox"
    if args.include_sent:
        query += " OR in:sent"

    results = service.users().messages().list(userId='me', q=query).execute()
    messages = results.get('messages', [])

    unique_messages = {}
    if messages:
        for msg in messages:
            full_msg = service.users().messages().get(userId='me', id=msg['id'], format='full').execute()
            headers = {k['name']: k['value'] for k in full_msg['payload']['headers']}
            
            unique_key = f"{headers.get('From', '')}-{headers.get('To', '')}-{headers.get('Subject', '')}-{full_msg.get('internalDate', '')}"
            if unique_key not in unique_messages or 'in:sent' in full_msg['labelIds']:
                unique_messages[unique_key] = full_msg

        last_received_time = max(message['internalDate'] for message in unique_messages.values())
        with open(last_time_path, 'w') as f:
            json.dump({'last_received_time': last_received_time}, f)

    sorted_messages = sorted(unique_messages.values(), key=lambda x: x['internalDate'])
    print(json.dumps(sorted_messages, indent=4))

if __name__ == '__main__':
    main()
